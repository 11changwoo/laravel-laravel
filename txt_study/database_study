-mysql 접속
    mysql -u root -p (처음 접속이라면 그냥 엔터, 설정한 비번이 있으면 입력후 엔터)

-laravel 연습시 이용한 DB, USER 만들기
  -DB 생성
    create database myapp;
  -USER 생성 및 권한 부여
    create user 'homestead' identified by 'secret';
    grant all privileges on myapp.* to 'homestead';
    flush privileges;

-테이블 만들기
    create table posts (
        id int(11) unsigned not null auto_increment primary key,
        title varchar(255),
        body text
    ) engine=InnoDB default charset=utf8 collate=utf8_unicode_ci;

    create table authors(
        id int(11) unsigned not null auto_increment primary key,
        email varchar(255),
        password varchar(60) not null
    ) engine=InnoDB default charset=utf8 collate=utf8_unicode_ci;

    insert into authors(email, password) values('john@example.com', 'password');

-테이블 삭제 시
    -외래키가 걸려 있을 때를 대비해 오류를 방지하기 위한 코드
        SET FOREIGN_KEY_CHECKS=0;

    -테이블 삭제
        drop table posts;
        drop table authors;

    -외래키 오류 방지하기 위해서 수정한 코드 되돌리기
        SET FOREIGN_KEY_CHECKS=1;

-- 이 후에는 REPL ( tinker 에서 연습해본 부분 )

-라라벨이 제공하는 REPL => tinker (실행 명령어 : php artisan tinker)
    -select
    DB::select('SELECT * FROM posts');

    -단일 데이터
    DB::selectOne('SELECT * FROM posts');

    -insert
    DB::insert('INSERT INTO posts(title, body) VALUES(?,?)','['Hello Database','Greetings from tinker']');
    DB::insert('INSERT INTO posts(title, body) VALUES(?,?)', ['Ola Database','Saludos de tinker']);


-라라벨에서 사용하는 DB 조작방법(쿼리 빌더)
    //DB::table() 과 같이 무조건 table 메서드로 시작
    //끝은 get(), first(), find(), pluck(), insert(), delete(), update()와 같은 메서드를 사용

 (DB 파사드 -> DB::)
 -데이터 조회
    DB::table('posts')->get(); //전체
    DB::table('posts')->get(['title']);    //원하는 열의 값만 조회
    DB::table('posts')->first();   //맨처음
    DB::table('posts')->find(2);   //해당 키값

 -조건절
    DB::table('posts')->where('id','=',1)->get();
    DB::table('posts')->where('id',1)->get();  //두번째 인자인 연산자가 등호(=)라면 생략 가능
    DB::table('posts')->whereId(1)->get(); //whereId는 동적 메서드고,대등[?] 조건에서만 사용 가능, 비교 기준이 되는 열을 낙타 표기법으로 표시 ex)created_at 이라는 열이 있으면 whereCreatedAt로 사용 가능
    DB::table('posts')->where(function ($query) { $query->where('id',1); })->get();    //클로저 사용(복잡한 조건 연산을 할때 사용)

 -자주 사용하는 다른 메서드들
    DB::table('posts')->insert(['title'=>'test', 'body'=>'test body']);   //행 삽입
    DB::table('posts')->where('id',3)->update(['body'=>'update success']);   //['array'=>'value']처럼 연관 배열 인자로 넘김 (조건없이 하면 전체 적용, 항상 조건절 사용하기)
    DB::table('posts')->delete(3); //해당 키값 데이터 삭제
    DB::table('posts')->where('id',1)->pluck('title');    //해당 열의 값으로만 구성된 컬렉션 조회
    DB::table('posts')->limit(1)->get();   //조회되는 수를 제한한다
    DB::table('posts')->orderBy('title', 'desc')->get();    //조회되는 결과를 정렬한다
    이 외에 count(), distinct(), select(DB::raw('count(*) as cnt')), join(), union(), whereNull(), whereNotNull(), having(), groupBy() 등 ..

 (REPL 사용 상태)
 (artisan 으로 모델 만들고 난 후 모델이용)

 -모델 쿼리
    App\Author::get();

 -새 인스턴스 생성 후 테이블 저장
    $author = new App\Author;
    $author->email = 'foo@bar.com';
    $author->password = 'password';
    $author->save();
    //QueryException 발생 이유 : 엘로퀀트는 모든 테이블에 updated_at, created_at 열이 있다고 가정하고 새로운 인스턴스를 테이블에 저장할때 현재의 타임스탬프 값을 할당한다.
    //그런데 언급한 열이 테이블에 없으므로 나타나는 것이다.
    //해결 방법은 필요한 열을 만들거나, 엘로퀀트의 타임스탬프 자동 입력 기능을 끄는 방법으로 해결할 수 있다.

 -다른 메서드로 데이터 저장
    //save() 메서드는 모델의 프로퍼티 값을 하나씩 할당해야해서 불편
    //create() 메서드를 이용하면 새 레코드를 좀 더 편하게 만들 수 있다
    App\Author::create([
        'email' => 'bar@baz.com',
        'password' => bcrypt('password'), //bcrypt : 단방향 해시를 만드는 도우미 함수(단방향이라 복호화 불가능)
    ]);
    //MassAssignmentException : 사용자가 넘겨준 값에서 허용할 열과 허용하지 않을 열을 구분하여 대량 할당 취약점으로부터 서비스를 보호하기 위한 장치
    //엘로퀀트는 $fillable 프로퍼티를 이용하는 허용목록방식, $guarded 프로퍼티를 이용한 금지목록방식의 2가지 방법을 제공

--모델 간의 관계

-모델 간의 관계를 이용해 새로운 레코드 만들기
    //App\User::find(1) 까지는 1번 기본 키를 가진 User 인스턴스를 반환
    //거기에 articles() 관계를 체인
    //그리고 create() 메서드로 새로운 모델을 만듦
    //user_id 값은 넣지 않았지만, 확인해보면 기록된것을 확인할 수 있다.
    App\User::find(1)->articles()->create(['title' => 'First article', 'content' => 'First content']);

-모델 간의 관계를 이용한 쿼리
    App\User::find(1)->articles()->get();
    App\User::find(1)->articles()->first();

-다대다 관계 테스트를 위한 데이터 만들기
     App\Tag::create(['name'=>'Foo', 'slug'=>'foo']);
     App\Tag::create(['name'=>'Bar', 'slug'=>'bar']);
     App\User::find(2)->articles()->create(['title'=>'Second article', 'content'=>'Second content']);

-다대다 관계 테스트
    $article = App\Article::find(1); //1번 Article 인스턴스를 얻은 후 tags() 관계를 체인
    $article->tags()->sync([1,2]); //여기에 이어서 sync() 메서드를 체인
    //attach() 나 detach() 메서드는 호출할 때마다 레코드가 이미 있는지 확인해야한다.
    //sync() 메서드는 테이블에 저장된 값보다 메서드 인자로 넘어온 값을 항상 우선시하기 때문에, 레코드를 삭제하고 인자로 받은 값을 다시 입력한다. 때문에 쉽게 최신 상태를 유지할 수 있다.
    $article->tags->pluck('name','id');

    $article = App\Article::find(2);
    $article->tags()->sync([1]);
    $article->tags->pluck('name','id');

    App\Tag::find(1)->articles;

-연결된 모델에 접근하는 방법
    //엘로퀀트 쿼리를 쓸 때, 관계 뒤에 메서드를 계속 체인하지 않는다면 메서드 대신 프로퍼티로 모델을 조회할 수 있다.
    //다음 쿼리들은 같은 결과를 출력
    App\Article::find(1)->tags()->get();
    App\Article::find(1)->tags;